{
  "version": 3,
  "sources": ["../../@azure/msal-browser/src/naa/BridgeError.ts", "../../@azure/msal-browser/src/naa/mapping/NestedAppAuthAdapter.ts", "../../@azure/msal-browser/src/error/NestedAppAuthError.ts", "../../@azure/msal-browser/src/controllers/NestedAppAuthController.ts"],
  "sourcesContent": ["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BridgeStatusCode } from \"./BridgeStatusCode\";\r\n\r\nexport type BridgeError = {\r\n    status: BridgeStatusCode;\r\n    code?: string; // auth_flow_last_error such as invalid_grant\r\n    subError?: string; // server_suberror_code such as consent_required\r\n    description?: string;\r\n    properties?: object; // additional telemetry info\r\n};\r\n\r\nexport function isBridgeError(error: unknown): error is BridgeError {\r\n    return (error as BridgeError).status !== undefined;\r\n}\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { TokenRequest } from \"../TokenRequest\";\r\nimport { AccountInfo as NaaAccountInfo } from \"../AccountInfo\";\r\nimport { RedirectRequest } from \"../../request/RedirectRequest\";\r\nimport { PopupRequest } from \"../../request/PopupRequest\";\r\nimport {\r\n    AccountInfo as MsalAccountInfo,\r\n    AuthError,\r\n    ClientAuthError,\r\n    ClientConfigurationError,\r\n    InteractionRequiredAuthError,\r\n    ServerError,\r\n    ICrypto,\r\n    Logger,\r\n    AuthToken,\r\n    TokenClaims,\r\n    ClientAuthErrorCodes,\r\n    AuthenticationScheme,\r\n    RequestParameterBuilder,\r\n    StringUtils,\r\n    createClientAuthError,\r\n    OIDC_DEFAULT_SCOPES,\r\n} from \"@azure/msal-common\";\r\nimport { isBridgeError } from \"../BridgeError\";\r\nimport { BridgeStatusCode } from \"../BridgeStatusCode\";\r\nimport { AuthenticationResult } from \"../../response/AuthenticationResult\";\r\nimport {} from \"../../error/BrowserAuthErrorCodes\";\r\nimport { AuthResult } from \"../AuthResult\";\r\nimport { SsoSilentRequest } from \"../../request/SsoSilentRequest\";\r\nimport { SilentRequest } from \"../../request/SilentRequest\";\r\n\r\nexport class NestedAppAuthAdapter {\r\n    protected crypto: ICrypto;\r\n    protected logger: Logger;\r\n    protected clientId: string;\r\n    protected clientCapabilities: string[];\r\n\r\n    constructor(\r\n        clientId: string,\r\n        clientCapabilities: string[],\r\n        crypto: ICrypto,\r\n        logger: Logger\r\n    ) {\r\n        this.clientId = clientId;\r\n        this.clientCapabilities = clientCapabilities;\r\n        this.crypto = crypto;\r\n        this.logger = logger;\r\n    }\r\n\r\n    public toNaaTokenRequest(\r\n        request:\r\n            | PopupRequest\r\n            | RedirectRequest\r\n            | SilentRequest\r\n            | SsoSilentRequest\r\n    ): TokenRequest {\r\n        let extraParams: Map<string, string>;\r\n        if (request.extraQueryParameters === undefined) {\r\n            extraParams = new Map<string, string>();\r\n        } else {\r\n            extraParams = new Map<string, string>(\r\n                Object.entries(request.extraQueryParameters)\r\n            );\r\n        }\r\n\r\n        const requestBuilder = new RequestParameterBuilder();\r\n        const claims = requestBuilder.addClientCapabilitiesToClaims(\r\n            request.claims,\r\n            this.clientCapabilities\r\n        );\r\n        const scopes = request.scopes || OIDC_DEFAULT_SCOPES;\r\n        const tokenRequest: TokenRequest = {\r\n            platformBrokerId: request.account?.homeAccountId,\r\n            clientId: this.clientId,\r\n            authority: request.authority,\r\n            scope: scopes.join(\" \"),\r\n            correlationId:\r\n                request.correlationId !== undefined\r\n                    ? request.correlationId\r\n                    : this.crypto.createNewGuid(),\r\n            claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\r\n            state: request.state,\r\n            authenticationScheme:\r\n                request.authenticationScheme || AuthenticationScheme.BEARER,\r\n            extraParameters: extraParams,\r\n        };\r\n\r\n        return tokenRequest;\r\n    }\r\n\r\n    public fromNaaTokenResponse(\r\n        request: TokenRequest,\r\n        response: AuthResult,\r\n        reqTimestamp: number\r\n    ): AuthenticationResult {\r\n        if (!response.token.id_token || !response.token.access_token) {\r\n            throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\r\n        }\r\n\r\n        const expiresOn = new Date(\r\n            (reqTimestamp + (response.token.expires_in || 0)) * 1000\r\n        );\r\n        const idTokenClaims = AuthToken.extractTokenClaims(\r\n            response.token.id_token,\r\n            this.crypto.base64Decode\r\n        );\r\n        const account = this.fromNaaAccountInfo(\r\n            response.account,\r\n            idTokenClaims\r\n        );\r\n        const scopes = response.token.scope || request.scope;\r\n\r\n        const authenticationResult: AuthenticationResult = {\r\n            authority: response.token.authority || account.environment,\r\n            uniqueId: account.localAccountId,\r\n            tenantId: account.tenantId,\r\n            scopes: scopes.split(\" \"),\r\n            account,\r\n            idToken: response.token.id_token,\r\n            idTokenClaims,\r\n            accessToken: response.token.access_token,\r\n            fromCache: true,\r\n            expiresOn: expiresOn,\r\n            tokenType:\r\n                request.authenticationScheme || AuthenticationScheme.BEARER,\r\n            correlationId: request.correlationId,\r\n            extExpiresOn: expiresOn,\r\n            state: request.state,\r\n        };\r\n\r\n        return authenticationResult;\r\n    }\r\n\r\n    /*\r\n     *  export type AccountInfo = {\r\n     *     homeAccountId: string;\r\n     *     environment: string;\r\n     *     tenantId: string;\r\n     *     username: string;\r\n     *     localAccountId: string;\r\n     *     name?: string;\r\n     *     idToken?: string;\r\n     *     idTokenClaims?: TokenClaims & {\r\n     *         [key: string]:\r\n     *             | string\r\n     *             | number\r\n     *             | string[]\r\n     *             | object\r\n     *             | undefined\r\n     *             | unknown;\r\n     *     };\r\n     *     nativeAccountId?: string;\r\n     *     authorityType?: string;\r\n     * };\r\n     */\r\n    public fromNaaAccountInfo(\r\n        fromAccount: NaaAccountInfo,\r\n        idTokenClaims?: TokenClaims\r\n    ): MsalAccountInfo {\r\n        const effectiveIdTokenClaims =\r\n            idTokenClaims || (fromAccount.idTokenClaims as TokenClaims);\r\n\r\n        const localAccountId =\r\n            fromAccount.localAccountId ||\r\n            effectiveIdTokenClaims?.oid ||\r\n            effectiveIdTokenClaims?.sub ||\r\n            \"\";\r\n\r\n        const tenantId =\r\n            fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\r\n\r\n        const homeAccountId =\r\n            fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\r\n\r\n        const username =\r\n            fromAccount.username ||\r\n            effectiveIdTokenClaims?.preferred_username ||\r\n            \"\";\r\n\r\n        const name = fromAccount.name || effectiveIdTokenClaims?.name;\r\n\r\n        const account: MsalAccountInfo = {\r\n            homeAccountId,\r\n            environment: fromAccount.environment,\r\n            tenantId,\r\n            username,\r\n            localAccountId,\r\n            name,\r\n            idToken: fromAccount.idToken,\r\n            idTokenClaims: effectiveIdTokenClaims,\r\n        };\r\n\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param error BridgeError\r\n     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\r\n     */\r\n    public fromBridgeError(\r\n        error: unknown\r\n    ):\r\n        | AuthError\r\n        | ClientAuthError\r\n        | ClientConfigurationError\r\n        | ServerError\r\n        | InteractionRequiredAuthError {\r\n        if (isBridgeError(error)) {\r\n            switch (error.status) {\r\n                case BridgeStatusCode.UserCancel:\r\n                    return new ClientAuthError(\r\n                        ClientAuthErrorCodes.userCanceled\r\n                    );\r\n                case BridgeStatusCode.NoNetwork:\r\n                    return new ClientAuthError(\r\n                        ClientAuthErrorCodes.noNetworkConnectivity\r\n                    );\r\n                case BridgeStatusCode.AccountUnavailable:\r\n                    return new ClientAuthError(\r\n                        ClientAuthErrorCodes.noAccountFound\r\n                    );\r\n                case BridgeStatusCode.Disabled:\r\n                    return new ClientAuthError(\r\n                        ClientAuthErrorCodes.nestedAppAuthBridgeDisabled\r\n                    );\r\n                case BridgeStatusCode.NestedAppAuthUnavailable:\r\n                    return new ClientAuthError(\r\n                        error.code ||\r\n                            ClientAuthErrorCodes.nestedAppAuthBridgeDisabled,\r\n                        error.description\r\n                    );\r\n                case BridgeStatusCode.TransientError:\r\n                case BridgeStatusCode.PersistentError:\r\n                    return new ServerError(error.code, error.description);\r\n                case BridgeStatusCode.UserInteractionRequired:\r\n                    return new InteractionRequiredAuthError(\r\n                        error.code,\r\n                        error.description\r\n                    );\r\n                default:\r\n                    return new AuthError(error.code, error.description);\r\n            }\r\n        } else {\r\n            return new AuthError(\"unknown_error\", \"An unknown error occurred\");\r\n        }\r\n    }\r\n}\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthError } from \"@azure/msal-common\";\r\n\r\n/**\r\n * NestedAppAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nexport const NestedAppAuthErrorMessage = {\r\n    unsupportedMethod: {\r\n        code: \"unsupported_method\",\r\n        desc: \"The PKCE code challenge and verifier could not be generated.\",\r\n    },\r\n};\r\n\r\nexport class NestedAppAuthError extends AuthError {\r\n    constructor(errorCode: string, errorMessage?: string) {\r\n        super(errorCode, errorMessage);\r\n\r\n        Object.setPrototypeOf(this, NestedAppAuthError.prototype);\r\n        this.name = \"NestedAppAuthError\";\r\n    }\r\n\r\n    public static createUnsupportedError(): NestedAppAuthError {\r\n        return new NestedAppAuthError(\r\n            NestedAppAuthErrorMessage.unsupportedMethod.code,\r\n            NestedAppAuthErrorMessage.unsupportedMethod.desc\r\n        );\r\n    }\r\n}\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    CommonAuthorizationUrlRequest,\r\n    CommonSilentFlowRequest,\r\n    PerformanceCallbackFunction,\r\n    AccountInfo,\r\n    Logger,\r\n    ICrypto,\r\n    IPerformanceClient,\r\n    DEFAULT_CRYPTO_IMPLEMENTATION,\r\n    PerformanceEvents,\r\n    AccountFilter,\r\n    TimeUtils,\r\n} from \"@azure/msal-common\";\r\nimport { ITokenCache } from \"../cache/ITokenCache\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\r\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\r\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\r\nimport {\r\n    ApiId,\r\n    WrapperSKU,\r\n    InteractionType,\r\n    DEFAULT_REQUEST,\r\n} from \"../utils/BrowserConstants\";\r\nimport { IController } from \"./IController\";\r\nimport { TeamsAppOperatingContext } from \"../operatingcontext/TeamsAppOperatingContext\";\r\nimport { IBridgeProxy } from \"../naa/IBridgeProxy\";\r\nimport { CryptoOps } from \"../crypto/CryptoOps\";\r\nimport { NestedAppAuthAdapter } from \"../naa/mapping/NestedAppAuthAdapter\";\r\nimport { NestedAppAuthError } from \"../error/NestedAppAuthError\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { EventType } from \"../event/EventType\";\r\nimport { EventCallbackFunction, EventError } from \"../event/EventMessage\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\r\n\r\nexport class NestedAppAuthController implements IController {\r\n    // OperatingContext\r\n    protected readonly operatingContext: TeamsAppOperatingContext;\r\n\r\n    // BridgeProxy\r\n    protected readonly bridgeProxy: IBridgeProxy;\r\n\r\n    // Crypto interface implementation\r\n    protected readonly browserCrypto: ICrypto;\r\n\r\n    // Input configuration by developer/user\r\n    protected readonly config: BrowserConfiguration;\r\n\r\n    // Logger\r\n    protected logger: Logger;\r\n\r\n    // Performance telemetry client\r\n    protected readonly performanceClient: IPerformanceClient;\r\n\r\n    // EventHandler\r\n    protected readonly eventHandler: EventHandler;\r\n\r\n    // NestedAppAuthAdapter\r\n    protected readonly nestedAppAuthAdapter: NestedAppAuthAdapter;\r\n\r\n    constructor(operatingContext: TeamsAppOperatingContext) {\r\n        this.operatingContext = operatingContext;\r\n        const proxy = this.operatingContext.getBridgeProxy();\r\n        if (proxy !== undefined) {\r\n            this.bridgeProxy = proxy;\r\n        } else {\r\n            throw new Error(\"unexpected: bridgeProxy is undefined\");\r\n        }\r\n\r\n        // Set the configuration.\r\n        this.config = operatingContext.getConfig();\r\n\r\n        // Initialize logger\r\n        this.logger = this.operatingContext.getLogger();\r\n        // Initialize performance client\r\n        this.performanceClient = this.config.telemetry.client;\r\n\r\n        // Initialize the crypto class.\r\n        this.browserCrypto = operatingContext.isBrowserEnvironment()\r\n            ? new CryptoOps(this.logger, this.performanceClient)\r\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\r\n\r\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\r\n\r\n        this.nestedAppAuthAdapter = new NestedAppAuthAdapter(\r\n            this.config.auth.clientId,\r\n            this.config.auth.clientCapabilities,\r\n            this.browserCrypto,\r\n            this.logger\r\n        );\r\n    }\r\n    getBrowserStorage(): BrowserCacheManager {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n\r\n    getEventHandler(): EventHandler {\r\n        return this.eventHandler;\r\n    }\r\n\r\n    static async createController(\r\n        operatingContext: TeamsAppOperatingContext\r\n    ): Promise<IController> {\r\n        const controller = new NestedAppAuthController(operatingContext);\r\n        return Promise.resolve(controller);\r\n    }\r\n\r\n    initialize(): Promise<void> {\r\n        // do nothing not required by this controller\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private ensureValidRequest<\r\n        T extends\r\n            | SsoSilentRequest\r\n            | SilentRequest\r\n            | PopupRequest\r\n            | RedirectRequest\r\n    >(request: T): T {\r\n        if (request?.correlationId) {\r\n            return request;\r\n        }\r\n        return {\r\n            ...request,\r\n            correlationId: this.browserCrypto.createNewGuid(),\r\n        };\r\n    }\r\n\r\n    private async acquireTokenInteractive(\r\n        request: PopupRequest | RedirectRequest\r\n    ): Promise<AuthenticationResult> {\r\n        const validRequest = this.ensureValidRequest(request);\r\n\r\n        this.eventHandler.emitEvent(\r\n            EventType.ACQUIRE_TOKEN_START,\r\n            InteractionType.Popup,\r\n            validRequest\r\n        );\r\n\r\n        const atPopupMeasurement = this.performanceClient.startMeasurement(\r\n            PerformanceEvents.AcquireTokenPopup,\r\n            validRequest.correlationId\r\n        );\r\n\r\n        atPopupMeasurement?.add({ nestedAppAuthRequest: true });\r\n\r\n        try {\r\n            const naaRequest =\r\n                this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\r\n            const reqTimestamp = TimeUtils.nowSeconds();\r\n            const response = await this.bridgeProxy.getTokenInteractive(\r\n                naaRequest\r\n            );\r\n            const result: AuthenticationResult =\r\n                this.nestedAppAuthAdapter.fromNaaTokenResponse(\r\n                    naaRequest,\r\n                    response,\r\n                    reqTimestamp\r\n                );\r\n\r\n            this.operatingContext.setActiveAccount(result.account);\r\n            this.eventHandler.emitEvent(\r\n                EventType.ACQUIRE_TOKEN_SUCCESS,\r\n                InteractionType.Popup,\r\n                result\r\n            );\r\n\r\n            atPopupMeasurement.add({\r\n                accessTokenSize: result.accessToken.length,\r\n                idTokenSize: result.idToken.length,\r\n            });\r\n\r\n            atPopupMeasurement.end({\r\n                success: true,\r\n                requestId: result.requestId,\r\n            });\r\n\r\n            return result;\r\n        } catch (e) {\r\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\r\n            this.eventHandler.emitEvent(\r\n                EventType.ACQUIRE_TOKEN_FAILURE,\r\n                InteractionType.Popup,\r\n                null,\r\n                e as EventError\r\n            );\r\n\r\n            atPopupMeasurement.end(\r\n                {\r\n                    success: false,\r\n                },\r\n                e\r\n            );\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async acquireTokenSilentInternal(\r\n        request: SilentRequest\r\n    ): Promise<AuthenticationResult> {\r\n        const validRequest = this.ensureValidRequest(request);\r\n        this.eventHandler.emitEvent(\r\n            EventType.ACQUIRE_TOKEN_START,\r\n            InteractionType.Silent,\r\n            validRequest\r\n        );\r\n\r\n        const ssoSilentMeasurement = this.performanceClient.startMeasurement(\r\n            PerformanceEvents.SsoSilent,\r\n            validRequest.correlationId\r\n        );\r\n\r\n        ssoSilentMeasurement?.increment({\r\n            visibilityChangeCount: 0,\r\n        });\r\n\r\n        ssoSilentMeasurement?.add({\r\n            nestedAppAuthRequest: true,\r\n        });\r\n\r\n        try {\r\n            const naaRequest =\r\n                this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\r\n            const reqTimestamp = TimeUtils.nowSeconds();\r\n            const response = await this.bridgeProxy.getTokenSilent(naaRequest);\r\n\r\n            const result: AuthenticationResult =\r\n                this.nestedAppAuthAdapter.fromNaaTokenResponse(\r\n                    naaRequest,\r\n                    response,\r\n                    reqTimestamp\r\n                );\r\n\r\n            this.operatingContext.setActiveAccount(result.account);\r\n            this.eventHandler.emitEvent(\r\n                EventType.ACQUIRE_TOKEN_SUCCESS,\r\n                InteractionType.Silent,\r\n                result\r\n            );\r\n            ssoSilentMeasurement?.add({\r\n                accessTokenSize: result.accessToken.length,\r\n                idTokenSize: result.idToken.length,\r\n            });\r\n            ssoSilentMeasurement?.end({\r\n                success: true,\r\n                requestId: result.requestId,\r\n            });\r\n            return result;\r\n        } catch (e) {\r\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\r\n            this.eventHandler.emitEvent(\r\n                EventType.ACQUIRE_TOKEN_FAILURE,\r\n                InteractionType.Silent,\r\n                null,\r\n                e as EventError\r\n            );\r\n            ssoSilentMeasurement?.end(\r\n                {\r\n                    success: false,\r\n                },\r\n                e\r\n            );\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async acquireTokenPopup(\r\n        request: PopupRequest\r\n    ): Promise<AuthenticationResult> {\r\n        return this.acquireTokenInteractive(request);\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n\r\n    async acquireTokenSilent(\r\n        silentRequest: SilentRequest\r\n    ): Promise<AuthenticationResult> {\r\n        return this.acquireTokenSilentInternal(silentRequest);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    acquireTokenByCode(\r\n        request: AuthorizationCodeRequest // eslint-disable-line @typescript-eslint/no-unused-vars\r\n    ): Promise<AuthenticationResult> {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n    acquireTokenNative(\r\n        request: // eslint-disable-line @typescript-eslint/no-unused-vars\r\n        | SilentRequest\r\n            | Partial<\r\n                  Omit<\r\n                      CommonAuthorizationUrlRequest,\r\n                      | \"requestedClaimsHash\"\r\n                      | \"responseMode\"\r\n                      | \"codeChallenge\"\r\n                      | \"codeChallengeMethod\"\r\n                      | \"nativeBroker\"\r\n                  >\r\n              >\r\n            | PopupRequest,\r\n        apiId: ApiId, // eslint-disable-line @typescript-eslint/no-unused-vars\r\n        accountId?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\r\n    ): Promise<AuthenticationResult> {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n    acquireTokenByRefreshToken(\r\n        commonRequest: CommonSilentFlowRequest, // eslint-disable-line @typescript-eslint/no-unused-vars\r\n        silentRequest: SilentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\r\n    ): Promise<AuthenticationResult> {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n\r\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     */\r\n    addEventCallback(callback: EventCallbackFunction): string | null {\r\n        return this.eventHandler.addEventCallback(callback);\r\n    }\r\n\r\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */\r\n    removeEventCallback(callbackId: string): void {\r\n        this.eventHandler.removeEventCallback(callbackId);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    removePerformanceCallback(callbackId: string): boolean {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n    enableAccountStorageEvents(): void {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n    disableAccountStorageEvents(): void {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n        // TODO: Look at standard implementation\r\n    }\r\n\r\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\r\n        const currentAccount = this.operatingContext.getActiveAccount();\r\n        if (currentAccount !== undefined) {\r\n            if (currentAccount.homeAccountId === homeAccountId) {\r\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\r\n                    currentAccount\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getAccountByLocalId(localId: string): AccountInfo | null {\r\n        const currentAccount = this.operatingContext.getActiveAccount();\r\n        if (currentAccount !== undefined) {\r\n            if (currentAccount.localAccountId === localId) {\r\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\r\n                    currentAccount\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getAccountByUsername(userName: string): AccountInfo | null {\r\n        const currentAccount = this.operatingContext.getActiveAccount();\r\n        if (currentAccount !== undefined) {\r\n            if (currentAccount.username === userName) {\r\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\r\n                    currentAccount\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    getAllAccounts(): AccountInfo[] {\r\n        const currentAccount = this.operatingContext.getActiveAccount();\r\n        if (currentAccount !== undefined) {\r\n            return [\r\n                this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount),\r\n            ];\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n    handleRedirectPromise(\r\n        hash?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\r\n    ): Promise<AuthenticationResult | null> {\r\n        return Promise.resolve(null);\r\n    }\r\n    loginPopup(\r\n        request?: PopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\r\n    ): Promise<AuthenticationResult> {\r\n        return this.acquireTokenInteractive(request || DEFAULT_REQUEST);\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    logout(logoutRequest?: EndSessionRequest | undefined): Promise<void> {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n    logoutRedirect(\r\n        logoutRequest?: EndSessionRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\r\n    ): Promise<void> {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n    logoutPopup(\r\n        logoutRequest?: EndSessionPopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\r\n    ): Promise<void> {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n    ssoSilent(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        request: Partial<\r\n            Omit<\r\n                CommonAuthorizationUrlRequest,\r\n                | \"requestedClaimsHash\"\r\n                | \"responseMode\"\r\n                | \"codeChallenge\"\r\n                | \"codeChallengeMethod\"\r\n                | \"nativeBroker\"\r\n            >\r\n        >\r\n    ): Promise<AuthenticationResult> {\r\n        return this.acquireTokenSilentInternal(request as SilentRequest);\r\n    }\r\n    getTokenCache(): ITokenCache {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n\r\n    /**\r\n     * Returns the logger instance\r\n     */\r\n    public getLogger(): Logger {\r\n        return this.logger;\r\n    }\r\n\r\n    /**\r\n     * Replaces the default logger set in configurations with new Logger with new configurations\r\n     * @param logger Logger instance\r\n     */\r\n    setLogger(logger: Logger): void {\r\n        this.logger = logger;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    setActiveAccount(account: AccountInfo | null): void {\r\n        /*\r\n         * StandardController uses this to allow the developer to set the active account\r\n         * in the nested app auth scenario the active account is controlled by the app hosting the nested app\r\n         */\r\n        this.logger.warning(\"nestedAppAuth does not support setActiveAccount\");\r\n        return;\r\n    }\r\n    getActiveAccount(): AccountInfo | null {\r\n        const currentAccount = this.operatingContext.getActiveAccount();\r\n        if (currentAccount !== undefined) {\r\n            return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\r\n        /*\r\n         * Standard controller uses this to set the sku and version of the wrapper library in the storage\r\n         * we do nothing here\r\n         */\r\n        return;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    setNavigationClient(navigationClient: INavigationClient): void {\r\n        this.logger.warning(\r\n            \"setNavigationClient is not supported in nested app auth\"\r\n        );\r\n    }\r\n    getConfiguration(): BrowserConfiguration {\r\n        return this.config;\r\n    }\r\n    isBrowserEnv(): boolean {\r\n        return this.operatingContext.isBrowserEnvironment();\r\n    }\r\n    getBrowserCrypto(): ICrypto {\r\n        return this.browserCrypto;\r\n    }\r\n    getPerformanceClient(): IPerformanceClient {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n\r\n    getRedirectResponse(): Map<string, Promise<AuthenticationResult | null>> {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    async clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    async hydrateCache(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        result: AuthenticationResult,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        request:\r\n            | SilentRequest\r\n            | SsoSilentRequest\r\n            | RedirectRequest\r\n            | PopupRequest\r\n    ): Promise<void> {\r\n        throw NestedAppAuthError.createUnsupportedError();\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
